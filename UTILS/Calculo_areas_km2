// Importar clasificación preliminar y coleccion 2
var clasification = ee.ImageCollection("projects/ee-anp-lineabase/assets/clasificacion-post")
                  .filterMetadata('version', 'equals', '14')
                  .mosaic();
var regionsclass =  ee.Image('projects/ee-eturpocayo/assets/sernanp/AUXILIAR_DATA/limite_anp_y_za_v2_raster').selfMask();
var driveFolder = 'ANP-EXPORT';
var OuputFileName = 'ANP_ESTADISTICAS_limite_anp_y_za';

print(clasification)

/**
* @description
*    calculate area
* 
* @author
*    João Siqueira
* 
*/

// Change the scale if you need.
var scale = 4.7;

// Define a list of bands_name to export  
var bands_name = [
    '1', '2', '3', '4', '5', '6',
    '7', '8', '9', '10', '11', '12'
];  


/**
* 
*/
// Territory image
var territory = regionsclass;

// LULC raster_clasification image
var raster_clasification = clasification.selfMask();

Map.addLayer(raster_clasification.randomVisualizer(),{},'raster_clasification',false)
Map.addLayer(territory.randomVisualizer(),{},'territory',false)

// Image area in km2
var pixelArea = ee.Image.pixelArea().divide(1000000); //km2

// Geometry to export
var geometry = regionsclass.geometry();

/**
* Convert a complex ob to feature collection
* @param obj 
*/
var convert2table = function (obj) {

    obj = ee.Dictionary(obj);

    var territory = obj.get('territory');

    var classesAndAreas = ee.List(obj.get('groups'));

    var tableRows = classesAndAreas.map(
        function (classAndArea) {
            classAndArea = ee.Dictionary(classAndArea);

            var classId = classAndArea.get('class');
            var area = classAndArea.get('sum');

            var tableColumns = ee.Feature(null)
                .set('territory', territory)
                .set('class', classId)
                .set('area', area);

            return tableColumns;
        }
    );

    return ee.FeatureCollection(ee.List(tableRows));
};

/**
* Calculate area crossing a cover map (deforestation, raster_clasification)
* and a region map (states, biomes, municipalites)
* @param image 
* @param territory 
* @param geometry
*/
var calculateArea = function (image, territory, geometry) {

    var reducer = ee.Reducer.sum().group(1, 'class').group(1, 'territory');

    var territotiesData = pixelArea.addBands(territory).addBands(image)
        .reduceRegion({
            reducer: reducer,
            geometry: geometry,
            scale: scale,
            maxPixels: 1e12
        });

    territotiesData = ee.List(territotiesData.get('groups'));

    var areas = territotiesData.map(convert2table);

    areas = ee.FeatureCollection(areas).flatten();

    return areas;
};

var areas = bands_name.map(
    function (band) {
        var image = raster_clasification.select('clasificacion_' + band);
        // var image = raster_clasification.select(band)
        
        var areas = calculateArea(image, territory, geometry);

        // set additional properties
        areas = areas.map(
            function (feature) {
                return feature.set('mes', band);
            }
        );

        return areas;
    }
);

areas = ee.FeatureCollection(areas).flatten();

Export.table.toDrive({
    collection: areas,
    description: OuputFileName,  
    folder: driveFolder,
    fileNamePrefix: OuputFileName,
    fileFormat: 'CSV'
});
